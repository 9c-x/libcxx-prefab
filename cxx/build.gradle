import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'com.android.library'
    id 'com.vanniktech.maven.publish'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion '21.4.7075529'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.1.0"
        externalNativeBuild {
            ndkBuild {
                arguments "-j${Runtime.getRuntime().availableProcessors()}"
            }
        }
    }
    buildFeatures {
        androidResources false
        prefabPublishing true
        buildConfig false
    }
    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }
    prefab {
        cxx {
            headers "$rootDir/cxx-source/include"
        }
    }
}

// NDK does not run strip on static libraries, do it ourselves
def allAbi = [
        'armeabi-v7a': 'arm-linux-androideabi-strip',
        'arm64-v8a'  : 'aarch64-linux-android-strip',
        'x86'        : 'i686-linux-android-strip',
        'x86_64'     : 'x86_64-linux-android-strip']

def stripNativeRelease = task('stripNativeRelease').doLast {
    def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    for (String abi : allAbi.keySet()) {
        def path = Paths.get(project.buildDir.path, 'intermediates',
                'ndkBuild', 'release', 'obj', 'local', abi)
        def lib = path.resolve('libcxx.a')

        def toolchain = Paths.get(android.ndkDirectory.toString(), 'toolchains', 'llvm', 'prebuilt')
        toolchain = Files.walk(toolchain).filter { it != toolchain }.findFirst().get()

        def strip = "${allAbi.get(abi)}${isWindows ? ".exe" : ""}"
        def stripPath = toolchain.resolve(Paths.get('bin', strip))

        exec {
            commandLine stripPath, '--strip-unneeded', '--remove-section=.comment', lib
            workingDir path
            ignoreExitValue false
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildRelease') {
        task.finalizedBy stripNativeRelease
    }
}

ext {
    POM_NAME = "libcxx Prefab"
    POM_DESCRIPTION = "LLVM libc++, specifically for Android, removing exception and RTTI support (https://github.com/topjohnwu/libcxx)."
}